<!DOCTYPE html>
<html lang="en">
  <head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, shrink-to-fit=no"
    />
    <meta name="description" content="" />
    <meta name="author" content="" />
    <link
      rel="icon"
      href="https://getbootstrap.com/docs/4.0/assets/img/favicons/favicon.ico"
    />

    <title>Driiv</title>

    <link
      rel="canonical"
      href="https://getbootstrap.com/docs/4.0/examples/sticky-footer/"
    />

    <!-- Bootstrap core CSS -->
    <link href="css/bootstrap.css" rel="stylesheet" />

    <!-- Custom styles for this template -->
    <link href="css/sticky-footer.css" rel="stylesheet" />

    <link
      rel="stylesheet"
      href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css"
      integrity="sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=="
      crossorigin=""
    />
    <script
      src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"
      integrity="sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew=="
      crossorigin=""
    ></script>
  </head>

  <body>
    <!-- Begin page content -->
    <main role="main" class="container">
      <script src="https://cdn.jsdelivr.net/npm/darkmode-js@1.5.6/lib/darkmode-js.min.js"></script>
      <script>
        var options = {
          label: "ðŸŒ“",
        };
        new Darkmode(options).showWidget();
      </script>

      <h1 class="mt-5">Driiv Result</h1>
      <table class="table">
        <thead class="thead-dark">
          <tr>
            <th scope="col">#</th>
            <th scope="col">Location</th>
            <th scope="col">Data Amount</th>
            <th scope="col">Time</th>
            <th scope="col">Upload Speed</th>
            <th scope="col">Computed Ground Speed</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <th scope="row">result</th>
            <td><%- coordinates %></td>
            <td><%= data_size %> Terabytes</td>
            <td><%= time %> Minutes</td>
            <td><%= int_speed %> Mbps</td>
            <td><%= gt_speed %> Mbps</td>
          </tr>
        </tbody>
      </table>
      <div id="map" style="height: 600px;"></div>

      <script>
        var coordinates = <%- coordinates %>
        var mymap = L.map("map").setView([coordinates.lat, coordinates.lng], 11);

        L.tileLayer(
          "https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw",
          {
            maxZoom: 18,
            attribution:
              'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' +
              '<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
              'Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
            id: "mapbox.dark",
          }
        ).addTo(mymap);

        var marker = L.marker([coordinates.lat, coordinates.lng]).addTo(mymap);

        drawTimeMap(mymap);

        // A helper function that converts [{lat: <lat>, lng: <lng>}, ...] to a [[<lat>, <lng>], ...] format.
        function ringCoordsHashToArray(ring) {
          return ring.map(function (latLng) {
            return [latLng.lat, latLng.lng];
          });
        }

        // Draws the resulting multipolygon from the response on the map.
        function drawTimeMap(map) {
          var data = <%- bounds %>
          // Reference for the response: http://docs.traveltimeplatform.com/reference/time-map/#response-body-json-attributes
          var shapesCoords = data.results[0].shapes.map(function (polygon) {
            var shell = ringCoordsHashToArray(polygon.shell);
            var holes = polygon.holes.map(ringCoordsHashToArray);
            return [shell].concat(holes);
          });
          var polygon = L.polygon(shapesCoords, { color: "red" });
          polygon.addTo(map);
          map.fitBounds(polygon.getBounds());
        }
      </script>

      <br />
    </main>
  </body>
</html>
